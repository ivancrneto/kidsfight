{"mappings":"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","sources":["<anon>","gameUtils.js","main.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7a4b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7a4b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bHOzE\", function(module, exports) {\n// Pure game logic utilities for KidsFightScene\n// Layout update logic for scene objects\nfunction $885af0d4d4d2f49b$var$updateSceneLayout(scene) {\n    const w = scene.scale.width;\n    const h = scene.scale.height;\n    // Background\n    if (scene.children && scene.children.list) {\n        const bg = scene.children.list.find((obj)=>obj.texture && obj.texture.key === 'scenario1');\n        if (bg) {\n            bg.setPosition(w / 2, h / 2);\n            bg.displayWidth = w;\n            bg.displayHeight = h;\n        }\n    }\n    // Platform\n    if (scene.children && scene.children.list) {\n        const platformRect = scene.children.list.find((obj)=>obj.type === 'Rectangle' && obj.fillColor === 0x8B5A2B);\n        if (platformRect) {\n            platformRect.setPosition(w / 2, 240);\n            platformRect.displayWidth = w;\n        }\n    }\n    // Camera and world bounds\n    if (scene.cameras && scene.cameras.main && scene.physics && scene.physics.world) {\n        scene.cameras.main.setBounds(0, 0, w, h);\n        scene.physics.world.setBounds(0, 0, w, h);\n    }\n    // Touch controls\n    if (typeof scene.updateControlPositions === 'function') scene.updateControlPositions();\n    // Timer text\n    if (scene.timerText) scene.timerText.setPosition(w / 2, 50);\n}\n// CSS application logic for game canvas and parent\nfunction $885af0d4d4d2f49b$var$applyGameCss() {\n    const canvas = document.querySelector('canvas');\n    const parent = document.getElementById('game-container');\n    if (canvas) {\n        canvas.style.position = 'fixed';\n        canvas.style.left = 'env(safe-area-inset-left, 0px)';\n        canvas.style.top = 'env(safe-area-inset-top, 0px)';\n        canvas.style.width = 'calc(100vw - env(safe-area-inset-left, 0px) - env(safe-area-inset-right, 0px))';\n        canvas.style.height = 'calc(100vh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px))';\n        canvas.style.maxWidth = '100vw';\n        canvas.style.maxHeight = '100vh';\n        canvas.style.objectFit = 'contain';\n        canvas.style.background = '#222';\n    }\n    if (parent) {\n        parent.style.position = 'fixed';\n        parent.style.left = 'env(safe-area-inset-left, 0px)';\n        parent.style.top = 'env(safe-area-inset-top, 0px)';\n        parent.style.width = '100vw';\n        parent.style.height = '100vh';\n        parent.style.background = '#222';\n        parent.style.overflow = 'hidden';\n    }\n}\n// tryAttack logic (simplified for testability)\nfunction $885af0d4d4d2f49b$var$tryAttack(scene, playerIdx, attacker, defender, now, special) {\n    if (!attacker || !defender) return;\n    const ATTACK_RANGE = 100;\n    const ATTACK_COOLDOWN = 500;\n    if (!scene.lastAttackTime) scene.lastAttackTime = [\n        0,\n        0\n    ];\n    if (!scene.attackCount) scene.attackCount = [\n        0,\n        0\n    ];\n    if (now - scene.lastAttackTime[playerIdx] < ATTACK_COOLDOWN) return;\n    if (Math.abs(attacker.x - defender.x) > ATTACK_RANGE) return;\n    scene.lastAttackTime[playerIdx] = now;\n    scene.attackCount[playerIdx]++;\n    defender.health -= special ? 30 : 10;\n    if (scene.cameras && scene.cameras.main && typeof scene.cameras.main.shake === 'function') scene.cameras.main.shake(special ? 250 : 100, special ? 0.03 : 0.01);\n}\nmodule.exports = {\n    updateSceneLayout: $885af0d4d4d2f49b$var$updateSceneLayout,\n    applyGameCss: $885af0d4d4d2f49b$var$applyGameCss,\n    tryAttack: $885af0d4d4d2f49b$var$tryAttack\n};\n\n});\n\n// Dynamically set game size based on viewport, accounting for mobile browser UI\nconst $efd3ba4ec2608b1d$var$GAME_WIDTH = window.innerWidth;\nconst $efd3ba4ec2608b1d$var$GAME_HEIGHT = window.innerHeight;\nconst $efd3ba4ec2608b1d$var$PLAYER_SIZE = 192;\nconst $efd3ba4ec2608b1d$var$PLAYER_SPEED = 200;\nconst $efd3ba4ec2608b1d$var$JUMP_VELOCITY = -400;\nconst $efd3ba4ec2608b1d$var$GRAVITY = 900;\nconst $efd3ba4ec2608b1d$var$ATTACK_RANGE = 100;\nconst $efd3ba4ec2608b1d$var$ATTACK_COOLDOWN = 500;\nconst $efd3ba4ec2608b1d$var$MAX_HEALTH = 100;\nconst $efd3ba4ec2608b1d$var$ROUND_TIME = 60;\n\n// import PlayerSelectScene from './player_select_scene.js';\nclass $efd3ba4ec2608b1d$var$KidsFightScene extends Phaser.Scene {\n    // --- EFFECTS: Special Effect Helper (Phaser 3.60+ workaround) ---\n    showSpecialEffect(x, y, count = 30) {\n        if (!this.specialEffect) return;\n        this.specialEffect.clear();\n        this.specialEffect.setVisible(true);\n        this.specialEffect.setAlpha(1);\n        this.specialEffect.setScale(1);\n        this.specialEffect.lineStyle(8, 0x00eaff, 0.7);\n        this.specialEffect.strokeCircle(x, y, 20);\n        this.tweens.add({\n            targets: this.specialEffect,\n            alpha: 0,\n            scaleX: 2,\n            scaleY: 2,\n            duration: 350,\n            onComplete: ()=>{\n                this.specialEffect.clear();\n                this.specialEffect.setVisible(false);\n                this.specialEffect.setAlpha(1);\n                this.specialEffect.setScale(1);\n            }\n        });\n    }\n    constructor(){\n        super('KidsFightScene');\n        this.lastAttackTime = [\n            0,\n            0\n        ];\n        this.attackCount = [\n            0,\n            0\n        ]; // Counts normal attacks landed by each player\n        this.lungeTimer = [\n            0,\n            0\n        ]; // Initialize lunge timers for both players\n        this.timeLeft = 60;\n        this.player1State = 'idle'; // 'idle', 'down', 'attack', 'special'\n        this.player2State = 'idle';\n    // console.log('[constructor] timeLeft:', this.timeLeft, 'ROUND_TIME:', typeof ROUND_TIME !== 'undefined' ? ROUND_TIME : 'undefined');\n    }\n    init(data) {\n        this.selected = data || {\n            p1: 0,\n            p2: 1\n        };\n    }\n    preload() {\n        // Load player sprite sheets (256x256)\n        this.load.image('player1_raw', 'sprites-bento3.png');\n        this.load.image('player2_raw', 'sprites-davir3.png');\n        // Load scenario background\n        this.load.image('scenario1', 'scenario1.png');\n    // Load particle spritesheet for effects\n    //this.load.atlas('flares', 'flares.png', 'flares.json');\n    }\n    create() {\n        // --- CREATE CUSTOM SPRITESHEETS FIRST ---\n        // Player 1\n        if (!this.textures.exists('player1')) {\n            const frameWidths = [\n                300,\n                300,\n                400,\n                460,\n                500,\n                440,\n                440,\n                440\n            ];\n            const frameHeight = 512;\n            const player1Texture = this.textures.get('player1_raw').getSourceImage();\n            this.textures.addSpriteSheet('player1', player1Texture, {\n                frameWidth: 430,\n                frameHeight: frameHeight,\n                startFrame: 0,\n                endFrame: 6\n            });\n            const tex = this.textures.get('player1');\n            tex.frames = {\n                __BASE: tex.frames['__BASE']\n            };\n            let x = 0;\n            for(let i = 0; i < frameWidths.length; i++){\n                tex.add(i, 0, x, 0, frameWidths[i], frameHeight);\n                x += frameWidths[i];\n            }\n        }\n        // Player 2\n        if (!this.textures.exists('player2')) {\n            const frameWidths2 = [\n                300,\n                300,\n                400,\n                460,\n                500,\n                400,\n                400,\n                400\n            ];\n            const frameHeight2 = 512;\n            const player2Texture = this.textures.get('player2_raw').getSourceImage();\n            this.textures.addSpriteSheet('player2', player2Texture, {\n                frameWidth: 400,\n                frameHeight: frameHeight2,\n                startFrame: 0,\n                endFrame: frameWidths2.length - 1\n            });\n            const tex2 = this.textures.get('player2');\n            tex2.frames = {\n                __BASE: tex2.frames['__BASE']\n            };\n            let x2 = 0;\n            for(let i = 0; i < frameWidths2.length; i++){\n                tex2.add(i, 0, x2, 0, frameWidths2[i], frameHeight2);\n                x2 += frameWidths2[i];\n            }\n        }\n        // Add background image\n        const bg = this.add.image($efd3ba4ec2608b1d$var$GAME_WIDTH / 2, $efd3ba4ec2608b1d$var$GAME_HEIGHT / 2, 'scenario1').setOrigin(0.5, 0.5);\n        bg.displayWidth = $efd3ba4ec2608b1d$var$GAME_WIDTH;\n        bg.displayHeight = $efd3ba4ec2608b1d$var$GAME_HEIGHT;\n        // Ensure world and camera bounds match the visible area (for mobile/responsive)\n        const cam = this.cameras.main;\n        if (this.isTouch) {\n            // Decrease bounds by 10% on each side for mobile\n            const padX = cam.width * 0.1;\n            const padY = cam.height * 0.05;\n            this.physics.world.setBounds(padX, padY, cam.width - 2 * padX, cam.height - 2 * padY);\n            this.cameras.main.setBounds(padX, padY, cam.width - 2 * padX, cam.height - 2 * padY);\n        } else {\n            this.physics.world.setBounds(0, 0, cam.width, cam.height);\n            this.cameras.main.setBounds(0, 0, cam.width, cam.height);\n        }\n        // --- TOUCH CONTROLS ---\n        this.touchControls = {\n            p1: {},\n            p2: {}\n        };\n        // Robust touch detection (works on iOS and all browsers)\n        const debugAlwaysShowTouch = false; // set to true to force show for debugging\n        this.isTouch = debugAlwaysShowTouch || typeof window !== 'undefined' && (navigator.maxTouchPoints && navigator.maxTouchPoints > 0 || 'ontouchstart' in window);\n        if (this.isTouch) {\n            const cam = this.cameras.main;\n            const w = cam.width;\n            const h = cam.height;\n            // Player 1 (left side) - relative positions\n            this.touchControls.p1.left = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p1.right = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p1.jump = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p1.down = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p1.attack = this.add.circle(0, 0, 30, 0xff4444, 0.8).setInteractive().setDepth(9999);\n            this.touchControls.p1.special = this.add.circle(0, 0, 30, 0xffd700, 0.8).setInteractive().setDepth(9999);\n            // Player 2 (right side) - relative positions\n            this.touchControls.p2.left = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p2.right = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p2.jump = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p2.down = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n            this.touchControls.p2.attack = this.add.circle(0, 0, 30, 0x44aaff, 0.8).setInteractive().setDepth(9999);\n            this.touchControls.p2.special = this.add.circle(0, 0, 30, 0xffd700, 0.8).setInteractive().setDepth(9999);\n            // Touch flags\n            this.touchFlags = {\n                p1: {\n                    left: false,\n                    right: false,\n                    jump: false,\n                    down: false,\n                    attack: false,\n                    special: false\n                },\n                p2: {\n                    left: false,\n                    right: false,\n                    jump: false,\n                    down: false,\n                    attack: false,\n                    special: false\n                }\n            };\n            // Setup touch events for all buttons\n            const setupBtn = (btn, flagObj, flag)=>{\n                btn.on('pointerdown', ()=>{\n                    flagObj[flag] = true;\n                });\n                btn.on('pointerup', ()=>{\n                    flagObj[flag] = false;\n                });\n                btn.on('pointerout', ()=>{\n                    flagObj[flag] = false;\n                });\n                btn.on('pointerupoutside', ()=>{\n                    flagObj[flag] = false;\n                });\n            };\n            Object.entries(this.touchControls.p1).forEach(([k, btn])=>setupBtn(btn, this.touchFlags.p1, k));\n            Object.entries(this.touchControls.p2).forEach(([k, btn])=>setupBtn(btn, this.touchFlags.p2, k));\n            // Add icons/labels (also relative)\n            this.touchLabels = [];\n            this.touchLabels.push(this.add.text(0, 0, '<', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, '>', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, '^', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'v', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'A', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'S', {\n                fontSize: '24px',\n                color: '#222'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, '<', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, '>', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, '^', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'v', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'A', {\n                fontSize: '24px',\n                color: '#fff'\n            }).setDepth(10000));\n            this.touchLabels.push(this.add.text(0, 0, 'S', {\n                fontSize: '24px',\n                color: '#222'\n            }).setDepth(10000));\n            // Immediately position all touch labels\n            this.updateControlPositions();\n        }\n        // --- EFFECTS ---\n        // Hit flash effect for attacks\n        this.hitFlash = this.add.graphics({\n            x: 0,\n            y: 0\n        }).setDepth(999);\n        this.hitFlash.setVisible(false);\n        // Particle system and emitter for special attacks\n        // Simple custom effect for special attacks (Phaser 3.60+ workaround)\n        this.specialEffect = this.add.graphics({\n            x: 0,\n            y: 0\n        }).setDepth(998);\n        this.specialEffect.setVisible(false);\n        // --- EFFECTS ---\n        // --- PLAYER SPAWN LOGIC (moved from orphaned code) ---\n        const playerSprites = [\n            'player1',\n            'player2'\n        ];\n        const scale = 0.4;\n        const frameHeight = 512;\n        const player1FrameWidths = [\n            300,\n            300,\n            430,\n            580,\n            580,\n            440,\n            440,\n            440\n        ];\n        // Align player feet to the ground (bottom of the screen)\n        const frameWidth = player1FrameWidths[0];\n        const bodyWidth = frameWidth * scale;\n        const bodyHeight = frameHeight * scale;\n        // player.y is the center, so set: playerY = GAME_HEIGHT - (this.textures.get('player1').getSourceImage().height * scale) / 2;\n        // But we can use the actual sprite height after creation for precision\n        let playerY;\n        // We'll set playerY after creating the sprite and scaling it.\n        const PLATFORM_Y = 230;\n        const PLATFORM_HEIGHT = 20;\n        // Add background image\n        bg.displayWidth = $efd3ba4ec2608b1d$var$GAME_WIDTH;\n        bg.displayHeight = $efd3ba4ec2608b1d$var$GAME_HEIGHT;\n        // Draw the platform rectangle above the background\n        const platformRect = this.add.rectangle($efd3ba4ec2608b1d$var$GAME_WIDTH / 2, PLATFORM_Y + PLATFORM_HEIGHT / 2, $efd3ba4ec2608b1d$var$GAME_WIDTH, PLATFORM_HEIGHT, 0x8B5A2B).setDepth(2).setVisible(false);\n        // Add static physics body for the platform\n        const platform = this.physics.add.staticGroup();\n        platform.create($efd3ba4ec2608b1d$var$GAME_WIDTH / 2, PLATFORM_Y + PLATFORM_HEIGHT / 2, null).setDisplaySize($efd3ba4ec2608b1d$var$GAME_WIDTH, PLATFORM_HEIGHT).setVisible(false).refreshBody();\n        // --- DEFENSIVE: Ensure valid selected and sprite keys ---\n        const playerSpritesSafe = [\n            'player1',\n            'player2'\n        ];\n        const selectedSafe = this.selected && typeof this.selected.p1 === 'number' && typeof this.selected.p2 === 'number' ? this.selected : {\n            p1: 0,\n            p2: 1\n        };\n        const p1Key = playerSpritesSafe[selectedSafe.p1] || 'player1';\n        const p2Key = playerSpritesSafe[selectedSafe.p2] || 'player2';\n        const PLAYER_PLATFORM_OFFSET = 20;\n        this.player1 = this.physics.add.sprite(200, PLATFORM_Y + PLAYER_PLATFORM_OFFSET, p1Key, 0);\n        this.player1.setScale(scale);\n        this.player1.setOrigin(0.5, 1); // bottom center\n        this.player1.body.setSize(this.player1.displayWidth, this.player1.displayHeight);\n        this.player1.body.setOffset(0, 0);\n        // Enable collision with platform\n        this.physics.add.collider(this.player1, platform);\n        this.player1.setCollideWorldBounds(true);\n        this.player1.setBounce(0.1);\n        this.player1.health = $efd3ba4ec2608b1d$var$MAX_HEALTH;\n        this.player1.facing = 1;\n        this.player2 = this.physics.add.sprite(600, PLATFORM_Y + PLAYER_PLATFORM_OFFSET, p2Key, 0);\n        this.player2.setScale(scale);\n        this.player2.setOrigin(0.5, 1); // bottom center\n        this.player2.body.setSize(this.player2.displayWidth, this.player2.displayHeight);\n        this.player2.body.setOffset(0, 0);\n        // Enable collision with platform\n        this.physics.add.collider(this.player2, platform);\n        this.player2.setCollideWorldBounds(true);\n        this.player2.setBounce(0.1);\n        this.player2.health = $efd3ba4ec2608b1d$var$MAX_HEALTH;\n        this.player2.facing = -1;\n        this.player2.setFlipX(true); // Invert horizontally\n        // Player 1 Animations (custom frames)\n        if (!this.anims.exists('p1_idle')) this.anims.create({\n            key: 'p1_idle',\n            frames: [\n                {\n                    key: 'player1',\n                    frame: 0\n                }\n            ],\n            frameRate: 1,\n            repeat: -1\n        });\n        if (!this.anims.exists('p1_walk')) this.anims.create({\n            key: 'p1_walk',\n            frames: [\n                {\n                    key: 'player1',\n                    frame: 1\n                },\n                {\n                    key: 'player1',\n                    frame: 2\n                }\n            ],\n            frameRate: 6,\n            repeat: -1\n        });\n        if (!this.anims.exists('p1_attack')) this.anims.create({\n            key: 'p1_attack',\n            frames: [\n                {\n                    key: 'player1',\n                    frame: 4\n                }\n            ],\n            frameRate: 1,\n            repeat: 0,\n            duration: 200 // Show hit frame for 200ms\n        });\n        if (!this.anims.exists('p1_special')) this.anims.create({\n            key: 'p1_special',\n            frames: [\n                {\n                    key: 'player1',\n                    frame: 6\n                }\n            ],\n            frameRate: 1,\n            repeat: 0,\n            duration: 900 // Show special frame for 900ms\n        });\n        // Down/crouch animations\n        if (!this.anims.exists('p1_down')) this.anims.create({\n            key: 'p1_down',\n            frames: [\n                {\n                    key: 'player1',\n                    frame: 5\n                }\n            ],\n            frameRate: 1,\n            repeat: -1\n        });\n        // Animations\n        if (!this.anims.exists('p2_idle')) this.anims.create({\n            key: 'p2_idle',\n            frames: [\n                {\n                    key: 'player2',\n                    frame: 0\n                }\n            ],\n            frameRate: 1,\n            repeat: -1\n        });\n        if (!this.anims.exists('p2_walk')) this.anims.create({\n            key: 'p2_walk',\n            frames: [\n                {\n                    key: 'player2',\n                    frame: 0\n                },\n                {\n                    key: 'player2',\n                    frame: 1\n                }\n            ],\n            frameRate: 6,\n            repeat: -1\n        });\n        if (!this.anims.exists('p2_attack')) this.anims.create({\n            key: 'p2_attack',\n            frames: [\n                {\n                    key: 'player2',\n                    frame: 4\n                }\n            ],\n            frameRate: 1,\n            repeat: 0,\n            duration: 200 // Show hit frame for 200ms\n        });\n        if (!this.anims.exists('p2_down')) this.anims.create({\n            key: 'p2_down',\n            frames: [\n                {\n                    key: 'player2',\n                    frame: 5\n                }\n            ],\n            frameRate: 1,\n            repeat: -1\n        });\n        if (!this.anims.exists('p2_special')) this.anims.create({\n            key: 'p2_special',\n            frames: [\n                {\n                    key: 'player2',\n                    frame: 6\n                }\n            ],\n            frameRate: 1,\n            repeat: 0,\n            duration: 900 // Show special frame for 900ms\n        });\n        this.player1.play('p1_idle');\n        this.player1.angle = 0;\n        this.player2.angle = 0;\n        // Reset loser y offset (in case of rematch)\n        this.playerY = playerY; // Store globally for use in endGame\n        if (!this.gameOver) this.player2.play('p2_idle');\n        // Store original Y for laying down math\n        this.player1._originalY = this.player1.y;\n        this.player2._originalY = this.player2.y;\n        // Animation complete: return to idle after attack\n        // (Replaced by manual timer for attack/special)\n        // this.player1.on('animationcomplete', ...)\n        // this.player2.on('animationcomplete', ...)\n        // Collisions\n        this.physics.add.collider(this.player1, this.floatPlatform);\n        this.physics.add.collider(this.player2, this.floatPlatform);\n        // Controls\n        this.cursors = this.input.keyboard.createCursorKeys();\n        this.keys = this.input.keyboard.addKeys({\n            a: 'A',\n            d: 'D',\n            w: 'W',\n            v: 'V',\n            b: 'B',\n            n: 'N',\n            s: 'S',\n            k: 'K',\n            l: 'L',\n            semicolon: 'SEMICOLON'\n        });\n        // Defensive: ensure all keys exist even if not mapped\n        const keyList = [\n            'a',\n            'd',\n            'w',\n            'v',\n            'b',\n            'n',\n            's',\n            'k',\n            'l',\n            'semicolon'\n        ];\n        for (const k of keyList)if (!this.keys[k]) this.keys[k] = {\n            isDown: false\n        };\n        // Global keydown debug (disable for touch)\n        if (!this.isTouch) window.addEventListener('keydown', function(e) {\n            e.key, e.code;\n        });\n        // Health bars\n        this.healthBar1Border = this.add.rectangle(200, 30, 204, 24, 0xffffff).setOrigin(0.5);\n        this.healthBar2Border = this.add.rectangle(600, 30, 204, 24, 0xffffff).setOrigin(0.5);\n        this.healthBar1Border.setStrokeStyle(2, 0x000000);\n        this.healthBar2Border.setStrokeStyle(2, 0x000000);\n        this.healthBar1 = this.add.rectangle(200, 30, 200, 20, 0xff4444);\n        this.healthBar2 = this.add.rectangle(600, 30, 200, 20, 0x44aaff);\n        this.healthBar1.setOrigin(0.5);\n        this.healthBar2.setOrigin(0.5);\n        this.children.bringToTop(this.healthBar1);\n        this.children.bringToTop(this.healthBar2);\n        // --- SPECIAL HIT CIRCLES (PIPS) ---\n        // Player 1 special pips (left, above health bar)\n        this.specialPips1 = [];\n        for(let i = 0; i < 3; i++){\n            const pip = this.add.circle(140 + i * 30, 16, 10, 0x888888, 0.8).setStrokeStyle(2, 0x000).setDepth(10);\n            pip.setVisible(true);\n            this.specialPips1.push(pip);\n        }\n        // Player 2 special pips (right, above health bar)\n        this.specialPips2 = [];\n        for(let i = 0; i < 3; i++){\n            const pip = this.add.circle(540 + i * 30, 16, 10, 0x888888, 0.8).setStrokeStyle(2, 0x000).setDepth(10);\n            pip.setVisible(true);\n            this.specialPips2.push(pip);\n        }\n        // Ensure all pips are reset to gray and visible\n        this.specialPips1.forEach((pip)=>pip.setFillStyle(0x888888).setVisible(true));\n        this.specialPips2.forEach((pip)=>pip.setFillStyle(0x888888).setVisible(true));\n        // Hide special ready circles\n        if (this.specialReady1) this.specialReady1.setVisible(false);\n        if (this.specialReadyText1) this.specialReadyText1.setVisible(false);\n        if (this.specialReady2) this.specialReady2.setVisible(false);\n        if (this.specialReadyText2) this.specialReadyText2.setVisible(false);\n        // --- SPECIAL READY CIRCLE (BIG S) ---\n        // Player 1\n        this.specialReady1 = this.add.circle(200, 60, 22, 0xffd700, 0.93).setStrokeStyle(3, 0x000).setDepth(15).setVisible(false);\n        this.specialReadyText1 = this.add.text(200, 60, 'S', {\n            fontSize: '26px',\n            color: '#000',\n            fontFamily: 'monospace',\n            fontStyle: 'bold'\n        }).setOrigin(0.5).setDepth(16).setVisible(false);\n        // Player 2\n        this.specialReady2 = this.add.circle(600, 60, 22, 0xffd700, 0.93).setStrokeStyle(3, 0x000).setDepth(15).setVisible(false);\n        this.specialReadyText2 = this.add.text(600, 60, 'S', {\n            fontSize: '26px',\n            color: '#000',\n            fontFamily: 'monospace',\n            fontStyle: 'bold'\n        }).setOrigin(0.5).setDepth(16).setVisible(false);\n        // Timer text display\n        this.timerText = this.add.text($efd3ba4ec2608b1d$var$GAME_WIDTH / 2, 50, Math.ceil(this.timeLeft), {\n            fontSize: '32px',\n            color: '#fff',\n            fontFamily: 'monospace',\n            align: 'center',\n            stroke: '#000',\n            strokeThickness: 4\n        }).setOrigin(0.5);\n        // --- FORCE RESIZE after scene (re)start ---\n        if (typeof $efd3ba4ec2608b1d$var$resizeGame === 'function') $efd3ba4ec2608b1d$var$resizeGame(this.game);\n        // Update all scene layout to match new size\n        this.updateSceneLayout();\n        // Listen for Phaser's resize event and re-apply CSS AND update layout\n        this.scale.on('resize', ()=>{\n            if (typeof applyGameCss === 'function') applyGameCss();\n            if (typeof this.updateSceneLayout === 'function') this.updateSceneLayout();\n        });\n    }\n    update(time, delta) {\n        // --- TOUCH CONTROLS: map to key states ---\n        // --- TOUCH CONTROLS: custom justPressed for attack/special ---\n        if (this.isTouch && this.touchFlags) {\n            // Setup justPressed logic for attack/special\n            if (!this._touchWasDownP1A && this.touchFlags.p1.attack) this._touchJustPressedP1A = true;\n            this._touchWasDownP1A = this.touchFlags.p1.attack;\n            if (!this._touchWasDownP1S && this.touchFlags.p1.special) this._touchJustPressedP1S = true;\n            this._touchWasDownP1S = this.touchFlags.p1.special;\n            if (!this._touchWasDownP2A && this.touchFlags.p2.attack) this._touchJustPressedP2A = true;\n            this._touchWasDownP2A = this.touchFlags.p2.attack;\n            if (!this._touchWasDownP2S && this.touchFlags.p2.special) this._touchJustPressedP2S = true;\n            this._touchWasDownP2S = this.touchFlags.p2.special;\n            // Map movement keys from touch to key states\n            this.keys.a.isDown = this.touchFlags.p1.left;\n            this.keys.d.isDown = this.touchFlags.p1.right;\n            this.keys.w.isDown = this.touchFlags.p1.jump;\n            this.keys.s.isDown = this.touchFlags.p1.down;\n            this.cursors.left.isDown = this.touchFlags.p2.left;\n            this.cursors.right.isDown = this.touchFlags.p2.right;\n            this.cursors.up.isDown = this.touchFlags.p2.jump;\n            this.cursors.down.isDown = this.touchFlags.p2.down;\n        }\n        // On desktop, do not overwrite keyboard input\n        // Timer logic (regressive)\n        if (!this.gameOver) {\n            if (typeof this.lastTimerUpdate !== 'number' || isNaN(this.lastTimerUpdate)) this.lastTimerUpdate = time;\n            if (typeof this.timeLeft !== 'number' || isNaN(this.timeLeft)) this.timeLeft = $efd3ba4ec2608b1d$var$ROUND_TIME;\n            const timerElapsed = Math.floor((time - this.lastTimerUpdate) / 1000);\n            if (timerElapsed > 0) {\n                this.timeLeft = Math.max(0, this.timeLeft - timerElapsed);\n                this.lastTimerUpdate += timerElapsed * 1000;\n            }\n        }\n        // Update timer display\n        if (this.timerText) this.timerText.setText(Math.ceil(this.timeLeft));\n        // Check win/lose by health\n        // Health-based win detection\n        if (!this.gameOver && this.player1 && this.player2) {\n            if (this.player1.health <= 0) {\n                this.endGame('Davi R Venceu!');\n                return;\n            } else if (this.player2.health <= 0) {\n                this.endGame('Bento Venceu!');\n                return;\n            }\n        }\n        if (this.timeLeft === 0) {\n            if (this.player1.health > this.player2.health) this.endGame('Bento Venceu!');\n            else if (this.player2.health > this.player1.health) this.endGame('Davi R Venceu!');\n            else this.endGame('Empate!');\n            return;\n        }\n        // Timer logic (regressive)\n        if (this.timeLeft <= 0 && !this.gameOver) {\n            this.endGame(\"Tempo Esgotado! Empate!\");\n            return;\n        }\n        // Player 1 movement\n        let p1Moving = false;\n        if (this.player1 && this.player1.body) {\n            const p1 = this.player1.body;\n            if (this.lungeTimer[0] > 0) this.lungeTimer[0] -= delta;\n            else {\n                p1.setVelocityX(0);\n                if (this.keys.a.isDown) {\n                    p1.setVelocityX(-$efd3ba4ec2608b1d$var$PLAYER_SPEED);\n                    p1Moving = true;\n                }\n                if (this.keys.d.isDown) {\n                    p1.setVelocityX($efd3ba4ec2608b1d$var$PLAYER_SPEED);\n                    p1Moving = true;\n                }\n                if (this.keys.w.isDown && p1.onFloor()) p1.setVelocityY($efd3ba4ec2608b1d$var$JUMP_VELOCITY);\n            }\n            // Player 1 walk animation\n            if (this.player1State === 'idle' && p1Moving && p1.onFloor() && !this.gameOver) {\n                if (this.player1.anims.currentAnim?.key !== 'p1_walk') this.player1.play('p1_walk', true);\n            } else if (this.player1State === 'idle' && this.player1.anims.currentAnim?.key === 'p1_walk' && !this.gameOver) this.player1.play('p1_idle', true);\n        }\n        // Player 2 movement\n        let p2Moving = false;\n        if (this.player2 && this.player2.body) {\n            const p2 = this.player2.body;\n            if (this.lungeTimer[1] > 0) this.lungeTimer[1] -= delta;\n            else {\n                p2.setVelocityX(0);\n                if (this.cursors.left.isDown) {\n                    p2.setVelocityX(-$efd3ba4ec2608b1d$var$PLAYER_SPEED);\n                    p2Moving = true;\n                }\n                if (this.cursors.right.isDown) {\n                    p2.setVelocityX($efd3ba4ec2608b1d$var$PLAYER_SPEED);\n                    p2Moving = true;\n                }\n                if (this.cursors.up.isDown && p2.onFloor()) p2.setVelocityY($efd3ba4ec2608b1d$var$JUMP_VELOCITY);\n            }\n            // Player 2 walk animation\n            if (this.player2State === 'idle' && p2Moving && p2.onFloor() && !this.gameOver) {\n                if (this.player2.anims.currentAnim?.key !== 'p2_walk') this.player2.play('p2_walk', true);\n            } else if (this.player2State === 'idle' && this.player2.anims.currentAnim?.key === 'p2_walk' && !this.gameOver) this.player2.play('p2_idle', true);\n        }\n        // Player 1 crouch (S or N key)\n        if (!this.gameOver) {\n            if (this.player1State === 'attack' || this.player1State === 'special') ;\n            else if (this.keys && (this.keys.n && this.keys.n.isDown || this.keys.s && this.keys.s.isDown)) {\n                if (this.player1State !== 'down') {\n                    this.player1.play('p1_down', true);\n                    this.player1State = 'down';\n                }\n            } else if (this.player1State !== 'idle') {\n                this.player1.play('p1_idle', true);\n                this.player1State = 'idle';\n            }\n        }\n        // Player 2 crouch (Down arrow or ; key)\n        if (!this.gameOver) {\n            if (this.player2State === 'attack' || this.player2State === 'special') ;\n            else if (this.cursors && this.cursors.down && this.cursors.down.isDown || this.keys && this.keys.semicolon && this.keys.semicolon.isDown) {\n                if (this.player2State !== 'down') {\n                    this.player2.play('p2_down', true);\n                    this.player2.setFlipX(true);\n                    this.player2State = 'down';\n                }\n            } else if (this.player2State !== 'idle') {\n                this.player2.play('p2_idle', true);\n                this.player2.setFlipX(true);\n                this.player2State = 'idle';\n            }\n        }\n        // Player 1 attack (V key or touch)\n        if (this.keys && this.keys.v && Phaser.Input.Keyboard.JustDown(this.keys.v) || this._touchJustPressedP1A) {\n            this._touchJustPressedP1A = false;\n            if (this.player1State !== 'attack' && this.player1State !== 'special') {\n                this.player1.play('p1_attack', true);\n                this.player1State = 'attack';\n                // Manually switch to idle after 400ms\n                this.time.delayedCall(200, ()=>{});\n            }\n        }\n        // Import pure utilities for testability\n        const { updateSceneLayout: updateSceneLayout, applyGameCss: applyGameCss1, tryAttack: tryAttack } = (parcelRequire(\"bHOzE\"));\n        // Dynamically update all scene layout to match current viewport size\n        $efd3ba4ec2608b1d$var$KidsFightScene.prototype.updateSceneLayout = function() {\n            return updateSceneLayout(this);\n        };\n        // --- GAME OVER HANDLER ---\n        $efd3ba4ec2608b1d$var$KidsFightScene.prototype.endGame = function(phrase) {\n            if (this.gameOver) return;\n            this.gameOver = true;\n            // Centered winning phrase\n            const winText = this.add.text(this.cameras.main.width / 2, this.cameras.main.height / 2, phrase, {\n                fontSize: '48px',\n                color: '#fff',\n                fontFamily: 'monospace',\n                stroke: '#000',\n                strokeThickness: 8,\n                align: 'center',\n                backgroundColor: 'rgba(0,0,0,0.35)',\n                padding: {\n                    left: 24,\n                    right: 24,\n                    top: 16,\n                    bottom: 16\n                }\n            }).setOrigin(0.5).setDepth(10001);\n            // Optionally, fade in the text\n            winText.setAlpha(0);\n            this.tweens.add({\n                targets: winText,\n                alpha: 1,\n                duration: 400\n            });\n            // Optionally, stop all player movement/animations\n            if (this.player1 && this.player1.anims) this.player1.anims.stop();\n            if (this.player2 && this.player2.anims) this.player2.anims.stop();\n        // Optionally, you could add a restart button or auto-restart after a delay here\n        };\n        // ...\n        parent.style.width = 'calc(100vw - env(safe-area-inset-left, 0px) - env(safe-area-inset-right, 0px))';\n        parent.style.height = 'calc(100vh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px))';\n        parent.style.maxWidth = '100vw';\n        parent.style.maxHeight = '100vh';\n        parent.style.background = '#222';\n    }\n}\nfunction $efd3ba4ec2608b1d$var$resizeGame(game) {\n    // Use window.innerWidth/innerHeight for true viewport size (accounts for mobile browser UI)\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n    game.scale.resize(w, h);\n    applyGameCss();\n}\n// --- Responsive Touch Controls Positioning ---\n$efd3ba4ec2608b1d$var$KidsFightScene.prototype.updateControlPositions = function() {\n    if (!this.isTouch || !this.touchControls || !this.cameras || !this.cameras.main) return;\n    const cam = this.cameras.main;\n    const w = cam.width;\n    const h = cam.height;\n    // Player 1\n    this.touchControls.p1.left.setPosition(w * 0.08, h * 0.85);\n    this.touchControls.p1.right.setPosition(w * 0.18, h * 0.85);\n    this.touchControls.p1.jump.setPosition(w * 0.13, h * 0.7);\n    this.touchControls.p1.down.setPosition(w * 0.13, h * 0.97);\n    this.touchControls.p1.attack.setPosition(w * 0.28, h * 0.89);\n    this.touchControls.p1.special.setPosition(w * 0.36, h * 0.89);\n    // Player 2\n    this.touchControls.p2.left.setPosition(w * 0.82, h * 0.85);\n    this.touchControls.p2.right.setPosition(w * 0.92, h * 0.85);\n    this.touchControls.p2.jump.setPosition(w * 0.87, h * 0.7);\n    this.touchControls.p2.down.setPosition(w * 0.87, h * 0.97);\n    this.touchControls.p2.attack.setPosition(w * 0.72, h * 0.89);\n    this.touchControls.p2.special.setPosition(w * 0.64, h * 0.89);\n    // Labels (order must match creation)\n    if (this.touchLabels && this.touchLabels.length === 12) {\n        this.touchLabels[0].setPosition(w * 0.06, h * 0.83);\n        this.touchLabels[1].setPosition(w * 0.16, h * 0.83);\n        this.touchLabels[2].setPosition(w * 0.11, h * 0.68);\n        this.touchLabels[3].setPosition(w * 0.11, h * 0.95);\n        this.touchLabels[4].setPosition(w * 0.25, h * 0.87);\n        this.touchLabels[5].setPosition(w * 0.33, h * 0.87);\n        this.touchLabels[6].setPosition(w * 0.79, h * 0.83);\n        this.touchLabels[7].setPosition(w * 0.89, h * 0.83);\n        this.touchLabels[8].setPosition(w * 0.84, h * 0.68);\n        this.touchLabels[9].setPosition(w * 0.84, h * 0.95);\n        this.touchLabels[10].setPosition(w * 0.69, h * 0.87);\n        this.touchLabels[11].setPosition(w * 0.61, h * 0.87);\n    }\n};\n// Phaser Game Config (must be after KidsFightScene is defined)\nconst $efd3ba4ec2608b1d$var$config = {\n    type: Phaser.AUTO,\n    width: $efd3ba4ec2608b1d$var$GAME_WIDTH,\n    height: $efd3ba4ec2608b1d$var$GAME_HEIGHT,\n    backgroundColor: '#222',\n    parent: 'game-container',\n    scene: $efd3ba4ec2608b1d$var$KidsFightScene,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: {\n                y: $efd3ba4ec2608b1d$var$GRAVITY\n            },\n            debug: false\n        }\n    },\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    }\n};\nwindow.onload = ()=>{\n    // Set initial size to fit screen\n    $efd3ba4ec2608b1d$var$config.width = window.innerWidth;\n    $efd3ba4ec2608b1d$var$config.height = window.innerHeight;\n    $efd3ba4ec2608b1d$var$config.scale.width = window.innerWidth;\n    $efd3ba4ec2608b1d$var$config.scale.height = window.innerHeight;\n    const game = new Phaser.Game($efd3ba4ec2608b1d$var$config);\n    // Initial resize to account for mobile browser UI\n    $efd3ba4ec2608b1d$var$resizeGame(game);\n    // Helper: double-resize to fix mobile browser chrome issues\n    function resizeWithDelay() {\n        $efd3ba4ec2608b1d$var$resizeGame(game);\n        setTimeout(()=>$efd3ba4ec2608b1d$var$resizeGame(game), 250); // Second resize after browser chrome settles\n    }\n    window.addEventListener('resize', resizeWithDelay);\n    window.addEventListener('orientationchange', resizeWithDelay);\n};\n\n\n//# sourceMappingURL=kidsfight.a0129ce6.js.map\n","// Pure game logic utilities for KidsFightScene\n\n// Layout update logic for scene objects\nfunction updateSceneLayout(scene) {\n  const w = scene.scale.width;\n  const h = scene.scale.height;\n  // Background\n  if (scene.children && scene.children.list) {\n    const bg = scene.children.list.find(obj => obj.texture && obj.texture.key === 'scenario1');\n    if (bg) {\n      bg.setPosition(w / 2, h / 2);\n      bg.displayWidth = w;\n      bg.displayHeight = h;\n    }\n  }\n  // Platform\n  if (scene.children && scene.children.list) {\n    const platformRect = scene.children.list.find(obj => obj.type === 'Rectangle' && obj.fillColor === 0x8B5A2B);\n    if (platformRect) {\n      platformRect.setPosition(w / 2, 230 + 20 / 2);\n      platformRect.displayWidth = w;\n    }\n  }\n  // Camera and world bounds\n  if (scene.cameras && scene.cameras.main && scene.physics && scene.physics.world) {\n    scene.cameras.main.setBounds(0, 0, w, h);\n    scene.physics.world.setBounds(0, 0, w, h);\n  }\n  // Touch controls\n  if (typeof scene.updateControlPositions === 'function') {\n    scene.updateControlPositions();\n  }\n  // Timer text\n  if (scene.timerText) {\n    scene.timerText.setPosition(w / 2, 50);\n  }\n}\n\n// CSS application logic for game canvas and parent\nfunction applyGameCss() {\n  const canvas = document.querySelector('canvas');\n  const parent = document.getElementById('game-container');\n  if (canvas) {\n    canvas.style.position = 'fixed';\n    canvas.style.left = 'env(safe-area-inset-left, 0px)';\n    canvas.style.top = 'env(safe-area-inset-top, 0px)';\n    canvas.style.width = 'calc(100vw - env(safe-area-inset-left, 0px) - env(safe-area-inset-right, 0px))';\n    canvas.style.height = 'calc(100vh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px))';\n    canvas.style.maxWidth = '100vw';\n    canvas.style.maxHeight = '100vh';\n    canvas.style.objectFit = 'contain';\n    canvas.style.background = '#222';\n  }\n  if (parent) {\n    parent.style.position = 'fixed';\n    parent.style.left = 'env(safe-area-inset-left, 0px)';\n    parent.style.top = 'env(safe-area-inset-top, 0px)';\n    parent.style.width = '100vw';\n    parent.style.height = '100vh';\n    parent.style.background = '#222';\n    parent.style.overflow = 'hidden';\n  }\n}\n\n// tryAttack logic (simplified for testability)\nfunction tryAttack(scene, playerIdx, attacker, defender, now, special) {\n  if (!attacker || !defender) return;\n  const ATTACK_RANGE = 100;\n  const ATTACK_COOLDOWN = 500;\n  if (!scene.lastAttackTime) scene.lastAttackTime = [0, 0];\n  if (!scene.attackCount) scene.attackCount = [0, 0];\n  if (now - scene.lastAttackTime[playerIdx] < ATTACK_COOLDOWN) return;\n  if (Math.abs(attacker.x - defender.x) > ATTACK_RANGE) return;\n  scene.lastAttackTime[playerIdx] = now;\n  scene.attackCount[playerIdx]++;\n  defender.health -= special ? 30 : 10;\n  if (scene.cameras && scene.cameras.main && typeof scene.cameras.main.shake === 'function') {\n    scene.cameras.main.shake(special ? 250 : 100, special ? 0.03 : 0.01);\n  }\n}\n\nmodule.exports = {\n  updateSceneLayout,\n  applyGameCss,\n  tryAttack,\n};\n","// Dynamically set game size based on viewport, accounting for mobile browser UI\nconst GAME_WIDTH = window.innerWidth;\nconst GAME_HEIGHT = window.innerHeight;\n\nconst PLAYER_SIZE = 192;\nconst PLAYER_SPEED = 200;\nconst JUMP_VELOCITY = -400;\nconst GRAVITY = 900;\nconst ATTACK_RANGE = 100;\nconst ATTACK_COOLDOWN = 500;\nconst MAX_HEALTH = 100;\n\nconst ROUND_TIME = 60;\n\n// import PlayerSelectScene from './player_select_scene.js';\n\n\nclass KidsFightScene extends Phaser.Scene {\n  // --- EFFECTS: Special Effect Helper (Phaser 3.60+ workaround) ---\n  showSpecialEffect(x, y, count = 30) {\n    if (!this.specialEffect) return;\n    this.specialEffect.clear();\n    this.specialEffect.setVisible(true);\n    this.specialEffect.setAlpha(1);\n    this.specialEffect.setScale(1);\n    this.specialEffect.lineStyle(8, 0x00eaff, 0.7);\n    this.specialEffect.strokeCircle(x, y, 20);\n    this.tweens.add({\n      targets: this.specialEffect,\n      alpha: 0,\n      scaleX: 2,\n      scaleY: 2,\n      duration: 350,\n      onComplete: () => {\n        this.specialEffect.clear();\n        this.specialEffect.setVisible(false);\n        this.specialEffect.setAlpha(1);\n        this.specialEffect.setScale(1);\n      }\n    });\n  }\n\n  constructor() {\n    super('KidsFightScene');\n    this.lastAttackTime = [0, 0];\n    this.attackCount = [0, 0]; // Counts normal attacks landed by each player\n    this.lungeTimer = [0, 0]; // Initialize lunge timers for both players\n    this.timeLeft = 60;\n    this.player1State = 'idle'; // 'idle', 'down', 'attack', 'special'\n    this.player2State = 'idle';\n    // console.log('[constructor] timeLeft:', this.timeLeft, 'ROUND_TIME:', typeof ROUND_TIME !== 'undefined' ? ROUND_TIME : 'undefined');\n  }\n\n  init(data) {\n    this.selected = data || { p1: 0, p2: 1 };\n  }\n\n  preload() {\n    // Load player sprite sheets (256x256)\n    this.load.image('player1_raw', 'sprites-bento3.png');\n    this.load.image('player2_raw', 'sprites-davir3.png');\n    // Load scenario background\n    this.load.image('scenario1', 'scenario1.png');\n    // Load particle spritesheet for effects\n    //this.load.atlas('flares', 'flares.png', 'flares.json');\n  }\n\n  create() {\n    // --- CREATE CUSTOM SPRITESHEETS FIRST ---\n    // Player 1\n    if (!this.textures.exists('player1')) {\n      const frameWidths = [300, 300, 400, 460, 500, 440, 440, 440];\n      const frameHeight = 512;\n      const player1Texture = this.textures.get('player1_raw').getSourceImage();\n      this.textures.addSpriteSheet('player1', player1Texture, {\n        frameWidth: 430,\n        frameHeight: frameHeight,\n        startFrame: 0,\n        endFrame: 6\n      });\n      const tex = this.textures.get('player1');\n      tex.frames = { __BASE: tex.frames['__BASE'] };\n      let x = 0;\n      for (let i = 0; i < frameWidths.length; i++) {\n        tex.add(i, 0, x, 0, frameWidths[i], frameHeight);\n        x += frameWidths[i];\n      }\n    }\n    // Player 2\n    if (!this.textures.exists('player2')) {\n      const frameWidths2 = [300, 300, 400, 460, 500, 400, 400, 400];\n      const frameHeight2 = 512;\n      const player2Texture = this.textures.get('player2_raw').getSourceImage();\n      this.textures.addSpriteSheet('player2', player2Texture, {\n        frameWidth: 400,\n        frameHeight: frameHeight2,\n        startFrame: 0,\n        endFrame: frameWidths2.length - 1\n      });\n      const tex2 = this.textures.get('player2');\n      tex2.frames = { __BASE: tex2.frames['__BASE'] };\n      let x2 = 0;\n      for (let i = 0; i < frameWidths2.length; i++) {\n        tex2.add(i, 0, x2, 0, frameWidths2[i], frameHeight2);\n        x2 += frameWidths2[i];\n      }\n    }\n    // Add background image\n    const bg = this.add.image(GAME_WIDTH / 2, GAME_HEIGHT / 2, 'scenario1').setOrigin(0.5, 0.5);\n    bg.displayWidth = GAME_WIDTH;\n    bg.displayHeight = GAME_HEIGHT;\n\n    // Ensure world and camera bounds match the visible area (for mobile/responsive)\n    const cam = this.cameras.main;\n    if (this.isTouch) {\n      // Decrease bounds by 10% on each side for mobile\n      const padX = cam.width * 0.1;\n      const padY = cam.height * 0.05;\n      this.physics.world.setBounds(padX, padY, cam.width - 2 * padX, cam.height - 2 * padY);\n      this.cameras.main.setBounds(padX, padY, cam.width - 2 * padX, cam.height - 2 * padY);\n    } else {\n      this.physics.world.setBounds(0, 0, cam.width, cam.height);\n      this.cameras.main.setBounds(0, 0, cam.width, cam.height);\n    }\n    // --- TOUCH CONTROLS ---\n    this.touchControls = { p1: {}, p2: {} };\n    // Robust touch detection (works on iOS and all browsers)\n    const debugAlwaysShowTouch = false; // set to true to force show for debugging\n    this.isTouch = debugAlwaysShowTouch || (typeof window !== 'undefined' && (\n      (navigator.maxTouchPoints && navigator.maxTouchPoints > 0) ||\n      ('ontouchstart' in window)\n    ));\n    if (this.isTouch) {\n      const cam = this.cameras.main;\n      const w = cam.width;\n      const h = cam.height;\n      // Player 1 (left side) - relative positions\n      this.touchControls.p1.left = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p1.right = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p1.jump = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p1.down = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p1.attack = this.add.circle(0, 0, 30, 0xff4444, 0.8).setInteractive().setDepth(9999);\n      this.touchControls.p1.special = this.add.circle(0, 0, 30, 0xffd700, 0.8).setInteractive().setDepth(9999);\n      // Player 2 (right side) - relative positions\n      this.touchControls.p2.left = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p2.right = this.add.rectangle(0, 0, 48, 48, 0x444444, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p2.jump = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p2.down = this.add.rectangle(0, 0, 48, 48, 0x888888, 0.7).setInteractive().setDepth(9999);\n      this.touchControls.p2.attack = this.add.circle(0, 0, 30, 0x44aaff, 0.8).setInteractive().setDepth(9999);\n      this.touchControls.p2.special = this.add.circle(0, 0, 30, 0xffd700, 0.8).setInteractive().setDepth(9999);\n      // Touch flags\n      this.touchFlags = { p1: {left:false,right:false,jump:false,down:false,attack:false,special:false}, p2: {left:false,right:false,jump:false,down:false,attack:false,special:false} };\n      // Setup touch events for all buttons\n      const setupBtn = (btn, flagObj, flag) => {\n        btn.on('pointerdown', ()=>{flagObj[flag]=true;});\n        btn.on('pointerup', ()=>{flagObj[flag]=false;});\n        btn.on('pointerout', ()=>{flagObj[flag]=false;});\n        btn.on('pointerupoutside', ()=>{flagObj[flag]=false;});\n      };\n      Object.entries(this.touchControls.p1).forEach(([k,btn])=>setupBtn(btn, this.touchFlags.p1, k));\n      Object.entries(this.touchControls.p2).forEach(([k,btn])=>setupBtn(btn, this.touchFlags.p2, k));\n      // Add icons/labels (also relative)\n      this.touchLabels = [];\n      this.touchLabels.push(this.add.text(0, 0, '<', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, '>', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, '^', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'v', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'A', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'S', {fontSize:'24px',color:'#222'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, '<', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, '>', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, '^', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'v', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'A', {fontSize:'24px',color:'#fff'}).setDepth(10000));\n      this.touchLabels.push(this.add.text(0, 0, 'S', {fontSize:'24px',color:'#222'}).setDepth(10000));\n      // Immediately position all touch labels\n      this.updateControlPositions();\n    }\n    \n\n    // --- EFFECTS ---\n    // Hit flash effect for attacks\n    this.hitFlash = this.add.graphics({ x: 0, y: 0 }).setDepth(999);\n    this.hitFlash.setVisible(false);\n    // Particle system and emitter for special attacks\n    // Simple custom effect for special attacks (Phaser 3.60+ workaround)\n    this.specialEffect = this.add.graphics({ x: 0, y: 0 }).setDepth(998);\n    this.specialEffect.setVisible(false);\n\n\n\n  // --- EFFECTS ---\n  // --- PLAYER SPAWN LOGIC (moved from orphaned code) ---\n  const playerSprites = ['player1', 'player2'];\n  const scale = 0.4;\n  const frameHeight = 512;\n  const player1FrameWidths = [300, 300, 430, 580, 580, 440, 440, 440];\n\n  // Align player feet to the ground (bottom of the screen)\n  const frameWidth = player1FrameWidths[0];\n  const bodyWidth = frameWidth * scale;\n  const bodyHeight = frameHeight * scale;\n  // player.y is the center, so set: playerY = GAME_HEIGHT - (this.textures.get('player1').getSourceImage().height * scale) / 2;\n// But we can use the actual sprite height after creation for precision\n  let playerY;\n  // We'll set playerY after creating the sprite and scaling it.\n  const PLATFORM_Y = 230;\n  const PLATFORM_HEIGHT = 20;\n  // Add background image\n  \n  bg.displayWidth = GAME_WIDTH;\n  bg.displayHeight = GAME_HEIGHT;\n\n  // Draw the platform rectangle above the background\n  const platformRect = this.add.rectangle(GAME_WIDTH / 2, PLATFORM_Y + PLATFORM_HEIGHT / 2, GAME_WIDTH, PLATFORM_HEIGHT, 0x8B5A2B).setDepth(2).setVisible(false);\n  // Add static physics body for the platform\n  const platform = this.physics.add.staticGroup();\n  platform.create(GAME_WIDTH / 2, PLATFORM_Y + PLATFORM_HEIGHT / 2, null)\n    .setDisplaySize(GAME_WIDTH, PLATFORM_HEIGHT)\n    .setVisible(false)\n    .refreshBody();\n\n  // --- DEFENSIVE: Ensure valid selected and sprite keys ---\n  const playerSpritesSafe = ['player1', 'player2'];\n  const selectedSafe = (this.selected && typeof this.selected.p1 === 'number' && typeof this.selected.p2 === 'number') ? this.selected : { p1: 0, p2: 1 };\n  const p1Key = playerSpritesSafe[selectedSafe.p1] || 'player1';\n  const p2Key = playerSpritesSafe[selectedSafe.p2] || 'player2';\n  const PLAYER_PLATFORM_OFFSET = 20;\n  this.player1 = this.physics.add.sprite(200, PLATFORM_Y + PLAYER_PLATFORM_OFFSET, p1Key, 0);\n  this.player1.setScale(scale);\n  this.player1.setOrigin(0.5, 1); // bottom center\n  this.player1.body.setSize(this.player1.displayWidth, this.player1.displayHeight);\n  this.player1.body.setOffset(0, 0);\n  // Enable collision with platform\n  this.physics.add.collider(this.player1, platform);\n  this.player1.setCollideWorldBounds(true);\n  this.player1.setBounce(0.1);\n  this.player1.health = MAX_HEALTH;\n  this.player1.facing = 1;\n\n      this.player2 = this.physics.add.sprite(600, PLATFORM_Y + PLAYER_PLATFORM_OFFSET, p2Key, 0);\n  this.player2.setScale(scale);\n  this.player2.setOrigin(0.5, 1); // bottom center\n  this.player2.body.setSize(this.player2.displayWidth, this.player2.displayHeight);\n  this.player2.body.setOffset(0, 0);\n  // Enable collision with platform\n  this.physics.add.collider(this.player2, platform);\n  this.player2.setCollideWorldBounds(true);\n  this.player2.setBounce(0.1);\n  this.player2.health = MAX_HEALTH;\n  this.player2.facing = -1;\n  this.player2.setFlipX(true); // Invert horizontally\n\n    // Player 1 Animations (custom frames)\n    if (!this.anims.exists('p1_idle')) {\n      this.anims.create({\n        key: 'p1_idle',\n        frames: [{ key: 'player1', frame: 0 }],\n        frameRate: 1,\n        repeat: -1\n      });\n    }\n    if (!this.anims.exists('p1_walk')) {\n      this.anims.create({\n        key: 'p1_walk',\n        frames: [\n          { key: 'player1', frame: 1 },\n          { key: 'player1', frame: 2 }\n        ],\n        frameRate: 6,\n        repeat: -1\n      });\n    }\n    if (!this.anims.exists('p1_attack')) {\n      this.anims.create({\n        key: 'p1_attack',\n        frames: [{ key: 'player1', frame: 4 }], // Use frame 4 for hit\n        frameRate: 1,\n        repeat: 0,\n        duration: 200 // Show hit frame for 200ms\n      });\n    }\n    if (!this.anims.exists('p1_special')) {\n      this.anims.create({\n        key: 'p1_special',\n        frames: [{ key: 'player1', frame: 6 }], // Use frame 6 for special\n        frameRate: 1,\n        repeat: 0,\n        duration: 900 // Show special frame for 900ms\n      });\n    }\n    // Down/crouch animations\n    if (!this.anims.exists('p1_down')) {\n      this.anims.create({\n        key: 'p1_down',\n        frames: [{ key: 'player1', frame: 5 }], // Use 6th image (index 5)\n        frameRate: 1,\n        repeat: -1\n      });\n    }\n\n    // Animations\n    if (!this.anims.exists('p2_idle')) {\n      this.anims.create({\n        key: 'p2_idle',\n        frames: [{ key: 'player2', frame: 0 }],\n        frameRate: 1,\n        repeat: -1\n      });\n    }\n    if (!this.anims.exists('p2_walk')) {\n      this.anims.create({\n        key: 'p2_walk',\n        frames: [\n          { key: 'player2', frame: 0 },\n          { key: 'player2', frame: 1 }\n        ],\n        frameRate: 6,\n        repeat: -1\n      });\n    }\n    if (!this.anims.exists('p2_attack')) {\n      this.anims.create({\n        key: 'p2_attack',\n        frames: [{ key: 'player2', frame: 4 }], // Use frame 4 for hit\n        frameRate: 1,\n        repeat: 0,\n        duration: 200 // Show hit frame for 200ms\n      });\n    }\n    if (!this.anims.exists('p2_down')) {\n      this.anims.create({\n        key: 'p2_down',\n        frames: [{ key: 'player2', frame: 5 }], // Use 6th image (index 5)\n        frameRate: 1,\n        repeat: -1\n      });\n    }\n    if (!this.anims.exists('p2_special')) {\n      this.anims.create({\n        key: 'p2_special',\n        frames: [{ key: 'player2', frame: 6 }], // Use frame 6 for special\n        frameRate: 1,\n        repeat: 0,\n        duration: 900 // Show special frame for 900ms\n      });\n    }\n    this.player1.play('p1_idle');\n    this.player1.angle = 0;\n    this.player2.angle = 0;\n    // Reset loser y offset (in case of rematch)\n    this.playerY = playerY; // Store globally for use in endGame\n    if (!this.gameOver) this.player2.play('p2_idle');\n    // Store original Y for laying down math\n    this.player1._originalY = this.player1.y;\n    this.player2._originalY = this.player2.y;\n\n    // Animation complete: return to idle after attack\n    // (Replaced by manual timer for attack/special)\n    // this.player1.on('animationcomplete', ...)\n    // this.player2.on('animationcomplete', ...)\n\n    // Collisions\n    this.physics.add.collider(this.player1, this.floatPlatform);\n    this.physics.add.collider(this.player2, this.floatPlatform);\n\n    // Controls\n    this.cursors = this.input.keyboard.createCursorKeys();\n    this.keys = this.input.keyboard.addKeys({\n      a: 'A', d: 'D', w: 'W', // P1 movement\n      v: 'V', b: 'B', n: 'N', s: 'S', // P1: V = attack, B = special, N/S = down/crouch\n      k: 'K', l: 'L', semicolon: 'SEMICOLON'\n    });\n    // Defensive: ensure all keys exist even if not mapped\n    const keyList = ['a','d','w','v','b','n','s','k','l','semicolon'];\n    for (const k of keyList) {\n      if (!this.keys[k]) this.keys[k] = { isDown: false };\n    }\n    // Global keydown debug (disable for touch)\n    if (!this.isTouch) {\n      window.addEventListener('keydown', function(e) {\n        ('Key pressed:', e.key, 'code:', e.code);\n      });\n    }\n\n    // Health bars\n    this.healthBar1Border = this.add.rectangle(200, 30, 204, 24, 0xffffff).setOrigin(0.5);\n    this.healthBar2Border = this.add.rectangle(600, 30, 204, 24, 0xffffff).setOrigin(0.5);\n    this.healthBar1Border.setStrokeStyle(2, 0x000000);\n    this.healthBar2Border.setStrokeStyle(2, 0x000000);\n    this.healthBar1 = this.add.rectangle(200, 30, 200, 20, 0xff4444);\n    this.healthBar2 = this.add.rectangle(600, 30, 200, 20, 0x44aaff);\n    this.healthBar1.setOrigin(0.5);\n    this.healthBar2.setOrigin(0.5);\n    this.children.bringToTop(this.healthBar1);\n    this.children.bringToTop(this.healthBar2);\n\n    // --- SPECIAL HIT CIRCLES (PIPS) ---\n    // Player 1 special pips (left, above health bar)\n    this.specialPips1 = [];\n    for (let i = 0; i < 3; i++) {\n      const pip = this.add.circle(140 + i * 30, 16, 10, 0x888888, 0.8).setStrokeStyle(2, 0x000).setDepth(10);\n      pip.setVisible(true);\n      this.specialPips1.push(pip);\n    }\n    // Player 2 special pips (right, above health bar)\n    this.specialPips2 = [];\n    for (let i = 0; i < 3; i++) {\n      const pip = this.add.circle(540 + i * 30, 16, 10, 0x888888, 0.8).setStrokeStyle(2, 0x000).setDepth(10);\n      pip.setVisible(true);\n      this.specialPips2.push(pip);\n    }\n    // Ensure all pips are reset to gray and visible\n    this.specialPips1.forEach(pip => pip.setFillStyle(0x888888).setVisible(true));\n    this.specialPips2.forEach(pip => pip.setFillStyle(0x888888).setVisible(true));\n    // Hide special ready circles\n    if (this.specialReady1) this.specialReady1.setVisible(false);\n    if (this.specialReadyText1) this.specialReadyText1.setVisible(false);\n    if (this.specialReady2) this.specialReady2.setVisible(false);\n    if (this.specialReadyText2) this.specialReadyText2.setVisible(false);\n\n    // --- SPECIAL READY CIRCLE (BIG S) ---\n    // Player 1\n    this.specialReady1 = this.add.circle(200, 60, 22, 0xffd700, 0.93).setStrokeStyle(3, 0x000).setDepth(15).setVisible(false);\n    this.specialReadyText1 = this.add.text(200, 60, 'S', { fontSize: '26px', color: '#000', fontFamily: 'monospace', fontStyle: 'bold' }).setOrigin(0.5).setDepth(16).setVisible(false);\n    // Player 2\n    this.specialReady2 = this.add.circle(600, 60, 22, 0xffd700, 0.93).setStrokeStyle(3, 0x000).setDepth(15).setVisible(false);\n    this.specialReadyText2 = this.add.text(600, 60, 'S', { fontSize: '26px', color: '#000', fontFamily: 'monospace', fontStyle: 'bold' }).setOrigin(0.5).setDepth(16).setVisible(false);\n\n    // Timer text display\n    this.timerText = this.add.text(GAME_WIDTH / 2, 50, Math.ceil(this.timeLeft), {\n      fontSize: '32px',\n      color: '#fff',\n      fontFamily: 'monospace',\n      align: 'center',\n      stroke: '#000',\n      strokeThickness: 4\n    }).setOrigin(0.5);\n\n    // --- FORCE RESIZE after scene (re)start ---\n    if (typeof resizeGame === 'function') {\n      resizeGame(this.game);\n    }\n    // Update all scene layout to match new size\n    this.updateSceneLayout();\n    // Listen for Phaser's resize event and re-apply CSS AND update layout\n    this.scale.on('resize', () => {\n      if (typeof applyGameCss === 'function') {\n        applyGameCss();\n      }\n      if (typeof this.updateSceneLayout === 'function') {\n        this.updateSceneLayout();\n      }\n    });\n  }\n\n\n  update(time, delta) {\n    // --- TOUCH CONTROLS: map to key states ---\n    // --- TOUCH CONTROLS: custom justPressed for attack/special ---\n    if (this.isTouch && this.touchFlags) {\n      // Setup justPressed logic for attack/special\n      if (!this._touchWasDownP1A && this.touchFlags.p1.attack) {\n        this._touchJustPressedP1A = true;\n      }\n      this._touchWasDownP1A = this.touchFlags.p1.attack;\n      if (!this._touchWasDownP1S && this.touchFlags.p1.special) {\n        this._touchJustPressedP1S = true;\n      }\n      this._touchWasDownP1S = this.touchFlags.p1.special;\n      if (!this._touchWasDownP2A && this.touchFlags.p2.attack) {\n        this._touchJustPressedP2A = true;\n      }\n      this._touchWasDownP2A = this.touchFlags.p2.attack;\n      if (!this._touchWasDownP2S && this.touchFlags.p2.special) {\n        this._touchJustPressedP2S = true;\n      }\n      this._touchWasDownP2S = this.touchFlags.p2.special;\n\n      // Map movement keys from touch to key states\n      this.keys.a.isDown = this.touchFlags.p1.left;\n      this.keys.d.isDown = this.touchFlags.p1.right;\n      this.keys.w.isDown = this.touchFlags.p1.jump;\n      this.keys.s.isDown = this.touchFlags.p1.down;\n      this.cursors.left.isDown = this.touchFlags.p2.left;\n      this.cursors.right.isDown = this.touchFlags.p2.right;\n      this.cursors.up.isDown = this.touchFlags.p2.jump;\n      this.cursors.down.isDown = this.touchFlags.p2.down;\n    }\n    // On desktop, do not overwrite keyboard input\n\n\n\n\n    // Timer logic (regressive)\n    if (!this.gameOver) {\n      if (typeof this.lastTimerUpdate !== 'number' || isNaN(this.lastTimerUpdate)) this.lastTimerUpdate = time;\n      if (typeof this.timeLeft !== 'number' || isNaN(this.timeLeft)) {\n        this.timeLeft = ROUND_TIME;\n      }\n      const timerElapsed = Math.floor((time - this.lastTimerUpdate) / 1000);\n      if (timerElapsed > 0) {\n        this.timeLeft = Math.max(0, this.timeLeft - timerElapsed);\n        this.lastTimerUpdate += timerElapsed * 1000;\n      }\n    }\n    // Update timer display\n    if (this.timerText) this.timerText.setText(Math.ceil(this.timeLeft));\n    // Check win/lose by health\n    // Health-based win detection\n    if (!this.gameOver && this.player1 && this.player2) {\n      if (this.player1.health <= 0) {\n        this.endGame('Davi R Venceu!');\n        return;\n      } else if (this.player2.health <= 0) {\n        this.endGame('Bento Venceu!');\n        return;\n      }\n    }\n    if (this.timeLeft === 0) {\n      if (this.player1.health > this.player2.health) {\n        this.endGame('Bento Venceu!');\n      } else if (this.player2.health > this.player1.health) {\n        this.endGame('Davi R Venceu!');\n      } else {\n        this.endGame('Empate!');\n      }\n      return;\n    }\n    // Timer logic (regressive)\n    if (this.timeLeft <= 0 && !this.gameOver) {\n      this.endGame(\"Tempo Esgotado! Empate!\");\n      return;\n    }\n    // Player 1 movement\n    let p1Moving = false;\n    if (this.player1 && this.player1.body) {\n      const p1 = this.player1.body;\n      if (this.lungeTimer[0] > 0) {\n        this.lungeTimer[0] -= delta;\n      } else {\n        p1.setVelocityX(0);\n        if (this.keys.a.isDown) {\n          p1.setVelocityX(-PLAYER_SPEED);\n          p1Moving = true;\n        }\n        if (this.keys.d.isDown) {\n          p1.setVelocityX(PLAYER_SPEED);\n          p1Moving = true;\n        }\n        if (this.keys.w.isDown && p1.onFloor()) p1.setVelocityY(JUMP_VELOCITY);\n      }\n      // Player 1 walk animation\n      if (\n        this.player1State === 'idle' &&\n        p1Moving &&\n        p1.onFloor() &&\n        !this.gameOver\n      ) {\n        if (this.player1.anims.currentAnim?.key !== 'p1_walk') {\n          this.player1.play('p1_walk', true);\n        }\n      } else if (\n        this.player1State === 'idle' &&\n        this.player1.anims.currentAnim?.key === 'p1_walk' &&\n        !this.gameOver\n      ) {\n        this.player1.play('p1_idle', true);\n      }\n    }\n    // Player 2 movement\n    let p2Moving = false;\n    if (this.player2 && this.player2.body) {\n      const p2 = this.player2.body;\n      if (this.lungeTimer[1] > 0) {\n        this.lungeTimer[1] -= delta;\n      } else {\n        p2.setVelocityX(0);\n        if (this.cursors.left.isDown) {\n          p2.setVelocityX(-PLAYER_SPEED);\n          p2Moving = true;\n        }\n        if (this.cursors.right.isDown) {\n          p2.setVelocityX(PLAYER_SPEED);\n          p2Moving = true;\n        }\n        if (this.cursors.up.isDown && p2.onFloor()) p2.setVelocityY(JUMP_VELOCITY);\n      }\n      // Player 2 walk animation\n      if (\n        this.player2State === 'idle' &&\n        p2Moving &&\n        p2.onFloor() &&\n        !this.gameOver\n      ) {\n        if (this.player2.anims.currentAnim?.key !== 'p2_walk') {\n          this.player2.play('p2_walk', true);\n        }\n      } else if (\n        this.player2State === 'idle' &&\n        this.player2.anims.currentAnim?.key === 'p2_walk' &&\n        !this.gameOver\n      ) {\n        this.player2.play('p2_idle', true);\n      }\n    }\n\n    // Player 1 crouch (S or N key)\n    if (!this.gameOver) {\n      if (this.player1State === 'attack' || this.player1State === 'special') {\n        // Do not interrupt attack/special\n      } else if (this.keys && ((this.keys.n && this.keys.n.isDown) || (this.keys.s && this.keys.s.isDown))) {\n        if (this.player1State !== 'down') {\n          this.player1.play('p1_down', true);\n          this.player1State = 'down';\n        }\n      } else {\n        if (this.player1State !== 'idle') {\n          this.player1.play('p1_idle', true);\n          this.player1State = 'idle';\n        }\n      }\n    }\n    // Player 2 crouch (Down arrow or ; key)\n    if (!this.gameOver) {\n      if (this.player2State === 'attack' || this.player2State === 'special') {\n        // Do not interrupt attack/special\n      } else if ((this.cursors && this.cursors.down && this.cursors.down.isDown) || (this.keys && this.keys.semicolon && this.keys.semicolon.isDown)) {\n        if (this.player2State !== 'down') {\n          this.player2.play('p2_down', true);\n          this.player2.setFlipX(true);\n          this.player2State = 'down';\n        }\n      } else {\n        if (this.player2State !== 'idle') {\n          this.player2.play('p2_idle', true);\n          this.player2.setFlipX(true);\n          this.player2State = 'idle';\n        }\n      }\n    }\n\n    // Player 1 attack (V key or touch)\n    if ((this.keys && this.keys.v && Phaser.Input.Keyboard.JustDown(this.keys.v)) || this._touchJustPressedP1A) {\n      this._touchJustPressedP1A = false;\n      if (this.player1State !== 'attack' && this.player1State !== 'special') {\n        this.player1.play('p1_attack', true);\n        this.player1State = 'attack';\n        // Manually switch to idle after 400ms\n        this.time.delayedCall(200, () => {\n    });\n  }\n}\n\n\n// Import pure utilities for testability\nconst { updateSceneLayout, applyGameCss, tryAttack } = require('./gameUtils');\n\n// Dynamically update all scene layout to match current viewport size\nKidsFightScene.prototype.updateSceneLayout = function() {\n  return updateSceneLayout(this);\n}\n\n// --- GAME OVER HANDLER ---\nKidsFightScene.prototype.endGame = function(phrase) {\n  if (this.gameOver) return;\n  this.gameOver = true;\n  // Centered winning phrase\n  const winText = this.add.text(\n    this.cameras.main.width / 2,\n    this.cameras.main.height / 2,\n    phrase,\n    {\n      fontSize: '48px',\n      color: '#fff',\n      fontFamily: 'monospace',\n      stroke: '#000',\n      strokeThickness: 8,\n      align: 'center',\n      backgroundColor: 'rgba(0,0,0,0.35)',\n      padding: { left: 24, right: 24, top: 16, bottom: 16 }\n    }\n  )\n    .setOrigin(0.5)\n    .setDepth(10001);\n  // Optionally, fade in the text\n  winText.setAlpha(0);\n  this.tweens.add({\n    targets: winText,\n    alpha: 1,\n    duration: 400\n  });\n  // Optionally, stop all player movement/animations\n  if (this.player1 && this.player1.anims) this.player1.anims.stop();\n  if (this.player2 && this.player2.anims) this.player2.anims.stop();\n  // Optionally, you could add a restart button or auto-restart after a delay here\n}\n\n// ...\n    parent.style.width = 'calc(100vw - env(safe-area-inset-left, 0px) - env(safe-area-inset-right, 0px))';\n    parent.style.height = 'calc(100vh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px))';\n    parent.style.maxWidth = '100vw';\n    parent.style.maxHeight = '100vh';\n    parent.style.background = '#222';\n  }\n}\n\nfunction resizeGame(game) {\n  // Use window.innerWidth/innerHeight for true viewport size (accounts for mobile browser UI)\n  const w = window.innerWidth;\n  const h = window.innerHeight;\n  game.scale.resize(w, h);\n  applyGameCss();\n}\n\n\n// --- Responsive Touch Controls Positioning ---\nKidsFightScene.prototype.updateControlPositions = function() {\n  if (!this.isTouch || !this.touchControls || !this.cameras || !this.cameras.main) return;\n  const cam = this.cameras.main;\n  const w = cam.width;\n  const h = cam.height;\n  // Player 1\n  this.touchControls.p1.left.setPosition(w * 0.08, h * 0.85);\n  this.touchControls.p1.right.setPosition(w * 0.18, h * 0.85);\n  this.touchControls.p1.jump.setPosition(w * 0.13, h * 0.7);\n  this.touchControls.p1.down.setPosition(w * 0.13, h * 0.97);\n  this.touchControls.p1.attack.setPosition(w * 0.28, h * 0.89);\n  this.touchControls.p1.special.setPosition(w * 0.36, h * 0.89);\n  // Player 2\n  this.touchControls.p2.left.setPosition(w * 0.82, h * 0.85);\n  this.touchControls.p2.right.setPosition(w * 0.92, h * 0.85);\n  this.touchControls.p2.jump.setPosition(w * 0.87, h * 0.7);\n  this.touchControls.p2.down.setPosition(w * 0.87, h * 0.97);\n  this.touchControls.p2.attack.setPosition(w * 0.72, h * 0.89);\n  this.touchControls.p2.special.setPosition(w * 0.64, h * 0.89);\n  // Labels (order must match creation)\n  if (this.touchLabels && this.touchLabels.length === 12) {\n    this.touchLabels[0].setPosition(w * 0.06, h * 0.83);\n    this.touchLabels[1].setPosition(w * 0.16, h * 0.83);\n    this.touchLabels[2].setPosition(w * 0.11, h * 0.68);\n    this.touchLabels[3].setPosition(w * 0.11, h * 0.95);\n    this.touchLabels[4].setPosition(w * 0.25, h * 0.87);\n    this.touchLabels[5].setPosition(w * 0.33, h * 0.87);\n    this.touchLabels[6].setPosition(w * 0.79, h * 0.83);\n    this.touchLabels[7].setPosition(w * 0.89, h * 0.83);\n    this.touchLabels[8].setPosition(w * 0.84, h * 0.68);\n    this.touchLabels[9].setPosition(w * 0.84, h * 0.95);\n    this.touchLabels[10].setPosition(w * 0.69, h * 0.87);\n    this.touchLabels[11].setPosition(w * 0.61, h * 0.87);\n  }\n}\n\n// Phaser Game Config (must be after KidsFightScene is defined)\nconst config = {\n  type: Phaser.AUTO,\n  width: GAME_WIDTH,\n  height: GAME_HEIGHT,\n  backgroundColor: '#222',\n  parent: 'game-container',\n  scene: KidsFightScene,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: GRAVITY },\n      debug: false\n    }\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH\n  }\n};\n\nwindow.onload = () => {\n  // Set initial size to fit screen\n  config.width = window.innerWidth;\n  config.height = window.innerHeight;\n  config.scale.width = window.innerWidth;\n  config.scale.height = window.innerHeight;\n  const game = new Phaser.Game(config);\n  // Initial resize to account for mobile browser UI\n  resizeGame(game);\n\n  // Helper: double-resize to fix mobile browser chrome issues\n  function resizeWithDelay() {\n    resizeGame(game);\n    setTimeout(() => resizeGame(game), 250); // Second resize after browser chrome settles\n  }\n\n  window.addEventListener('resize', resizeWithDelay);\n  window.addEventListener('orientationchange', resizeWithDelay);\n};\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","updateSceneLayout","scene","w","scale","width","h","height","children","list","bg","find","obj","texture","key","setPosition","displayWidth","displayHeight","platformRect","type","fillColor","cameras","main","physics","world","setBounds","updateControlPositions","timerText","applyGameCss","canvas","document","querySelector","parent","getElementById","style","position","left","top","maxWidth","maxHeight","objectFit","background","overflow","tryAttack","playerIdx","attacker","defender","now","special","lastAttackTime","attackCount","Math","abs","x","health","shake","$efd3ba4ec2608b1d$var$GAME_WIDTH","window","innerWidth","$efd3ba4ec2608b1d$var$GAME_HEIGHT","innerHeight","$efd3ba4ec2608b1d$var$KidsFightScene","Phaser","Scene","showSpecialEffect","y","count","specialEffect","clear","setVisible","setAlpha","setScale","lineStyle","strokeCircle","tweens","add","targets","alpha","scaleX","scaleY","duration","onComplete","constructor","lungeTimer","timeLeft","player1State","player2State","data","selected","p1","p2","preload","load","image","create","playerY","textures","exists","frameWidths","player1Texture","get","getSourceImage","addSpriteSheet","frameWidth","frameHeight","startFrame","endFrame","tex","frames","__BASE","i","length","frameWidths2","player2Texture","tex2","x2","setOrigin","cam","isTouch","padX","padY","touchControls","navigator","maxTouchPoints","rectangle","setInteractive","setDepth","right","jump","down","attack","circle","touchFlags","setupBtn","btn","flagObj","flag","on","Object","entries","forEach","k","touchLabels","push","text","fontSize","color","hitFlash","graphics","PLATFORM_Y","platform","staticGroup","setDisplaySize","refreshBody","playerSpritesSafe","selectedSafe","p1Key","p2Key","player1","sprite","body","setSize","setOffset","collider","setCollideWorldBounds","setBounce","facing","player2","setFlipX","anims","frame","frameRate","repeat","play","angle","gameOver","_originalY","floatPlatform","cursors","input","keyboard","createCursorKeys","keys","addKeys","a","d","v","b","n","s","l","semicolon","isDown","addEventListener","e","healthBar1Border","healthBar2Border","setStrokeStyle","healthBar1","healthBar2","bringToTop","specialPips1","pip","specialPips2","setFillStyle","specialReady1","specialReadyText1","specialReady2","specialReadyText2","fontFamily","fontStyle","ceil","align","stroke","strokeThickness","$efd3ba4ec2608b1d$var$resizeGame","game","update","time","delta","_touchWasDownP1A","_touchJustPressedP1A","_touchWasDownP1S","_touchJustPressedP1S","_touchWasDownP2A","_touchJustPressedP2A","_touchWasDownP2S","_touchJustPressedP2S","up","lastTimerUpdate","isNaN","timerElapsed","floor","max","setText","endGame","p1Moving","setVelocityX","onFloor","setVelocityY","currentAnim","p2Moving","Input","Keyboard","JustDown","delayedCall","applyGameCss1","prototype","phrase","winText","backgroundColor","padding","bottom","stop","resize","$efd3ba4ec2608b1d$var$config","AUTO","default","arcade","gravity","debug","mode","Scale","RESIZE","autoCenter","CENTER_BOTH","onload","Game","resizeWithDelay","setTimeout"],"version":3,"file":"kidsfight.a0129ce6.js.map"}